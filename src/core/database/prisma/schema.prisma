generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum InvitationStatus {
    INVITED
    ACCEPTED
    REJECTED
}

enum SubscriptionStatus {
    PENDING
    ACTIVE
    CANCELED
    EXPIRED
}

enum AuthProvider {
    LOCAL
    GOOGLE
}

enum Role {
    OWNER
    ADMIN
    MEMBER
}

enum SourceType {
    UPLOAD
    URL
    MANUAL
}

enum SourceStatus {
    PROCESSING
    FAILED
    DONE
}

model Plan {
    planId              Int    @id @default(autoincrement())
    price               Float
    name                String
    apiCallLimit        Int
    maxSources          Int
    queryTokenLimit     Int
    embeddingTokenLimit Int
    stripePriceId       String

    subscriptions Subscription[]
}

model Subscription {
    subscriptionId       Int                @id @default(autoincrement())
    organizationId       Int
    planId               Int
    status               SubscriptionStatus
    startDate            DateTime
    endDate              DateTime
    renewalDate          DateTime?
    canceledDate         DateTime?
    stripeCustomerId     String
    stripeSubscriptionId String
    createdAt            DateTime           @default(now())
    updatedAt            DateTime           @updatedAt()

    plan         Plan         @relation(fields: [planId], references: [planId])
    organization Organization @relation(fields: [organizationId], references: [organizationId])
}

model User {
    userId           Int           @id @default(autoincrement())
    username         String        @unique
    email            String        @unique
    password         String
    profileUrl       String?
    authProviderName AuthProvider?
    authProviderId   String?
    createdAt        DateTime      @default(now())
    updatedAt        DateTime      @updatedAt()

    organizationUser OrganizationUser[]
}

model OrganizationUser {
    organizationUserId Int      @id @default(autoincrement())
    organizationId     Int
    userId             Int
    role               Role
    createdAt          DateTime @default(now())
    updatedAt          DateTime @updatedAt()

    organization Organization @relation(fields: [organizationId], references: [organizationId])
    user         User         @relation(fields: [userId], references: [userId])
}

model OrganizationInvite {
    organizationInviteId Int              @id @default(autoincrement())
    organizationId       Int
    email                String
    status               InvitationStatus
    code                 String
    role                 Role
    expiredDate          DateTime
    createdAt            DateTime         @default(now())
    updatedAt            DateTime         @updatedAt()

    organization Organization @relation(fields: [organizationId], references: [organizationId])
}

model Organization {
    organizationId   Int      @id @default(autoincrement())
    name             String
    email            String
    description      String?
    stripeCustomerId String
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt()

    subscriptions      Subscription[]
    sources            Source[]
    aiQueries          AiQuery[]
    apiKeys            ApiKey[]
    organizationUser   OrganizationUser[]
    aiEmbedding        AiEmbedding[]
    OrganizationInvite OrganizationInvite[]
}

model Source {
    sourceId       Int          @id @default(autoincrement())
    organizationId Int
    title          String
    rawText        String
    type           SourceType
    status         SourceStatus
    metadata       Json?
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt()

    organization Organization  @relation(fields: [organizationId], references: [organizationId])
    sourceChunks SourceChunk[]
    aiEmbedding  AiEmbedding[]
}

model SourceChunk {
    sourceChunkId Int                   @id @default(autoincrement())
    sourceId      Int
    chunkText     String
    embedding     Unsupported("vector")
    createdAt     DateTime              @default(now())

    source Source @relation(fields: [sourceId], references: [sourceId], onDelete: Cascade)
}

model AiEmbedding {
    aiEmbeddingId  Int      @id @default(autoincrement())
    sourceId       Int?
    organizationId Int
    tokensUsed     Int
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt()

    organization Organization @relation(fields: [organizationId], references: [organizationId])
    source       Source?      @relation(fields: [sourceId], references: [sourceId])
}

model AiQuery {
    aiQueryId      Int      @id @default(autoincrement())
    organizationId Int
    queryText      String
    responseText   String
    tokensUsed     Int
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt()

    organization Organization @relation(fields: [organizationId], references: [organizationId])
}

model ApiKey {
    apiKeyId       Int      @id @default(autoincrement())
    organizationId Int
    name           String
    keyHash        String   @unique
    scopes         String[]
    isActive       Boolean
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt()

    organization Organization @relation(fields: [organizationId], references: [organizationId])
}
